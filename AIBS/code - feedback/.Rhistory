plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 6, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC6"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = danish[, "emotion"], danish.pr$x[, 1:12]) %>%
as.data.frame()
# Task definition
task_danish = TaskClassif$new(id = "danish", backend = danish,
target = "emotion")
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_danish_pca = TaskClassif$new(id = "danish", backend = components,
target = "emotion")
task_danish_pca$col_roles$group = "ID"
components <- cbind(emotion = danish[, "emotion"],ID=danish[,"ID"] danish.pr$x[, 1:12]) %>%
components <- cbind(emotion = danish[, "emotion"],ID=danish[,"ID"], danish.pr$x[, 1:12]) %>%
as.data.frame()
# Task definition
task_danish = TaskClassif$new(id = "danish", backend = danish,
target = "emotion")
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_danish_pca = TaskClassif$new(id = "danish", backend = components,
target = "emotion")
task_danish_pca$col_roles$group = "ID"
task_danish_pca$col_roles$feature = setdiff(task_danish_pca$col_roles$feature, "ID")
components <- cbind(emotion = english[, "emotion"], ID = english[,"ID"], english.pr$x[, 1:17]) %>%
as.data.frame()
# Task definition
rdesc = rsmp("repeated_cv",repeats = 10, folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_english_pca = TaskClassif$new(id = "English", backend = components,
target = "emotion")
task_english_pca$col_roles$group = "ID"
task_english_pca$col_roles$feature = setdiff(task_english_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet",  alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_english_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
danish <-read_csv("Danish.csv",show_col_types = FALSE)
danish = subset(danish, select = -c(nationality))
danish$emotion = as.factor(danish$emotion)
danish <- danish %>% drop_na()
danish.pr <- prcomp(danish[c(1:163)], center = TRUE,scale. = TRUE)
summary(danish.pr)
screeplot(danish.pr, type = "l", npcs = 25, main = "Screeplot of the first 20 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(danish.pr$sdev^2 / sum(danish.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 6, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC6"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = danish[, "emotion"],ID=danish[,"ID"], danish.pr$x[, 1:12]) %>%
as.data.frame()
# Task definition
task_danish = TaskClassif$new(id = "danish", backend = danish,
target = "emotion")
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_danish_pca = TaskClassif$new(id = "danish", backend = components,
target = "emotion")
task_danish_pca$col_roles$group = "ID"
task_danish_pca$col_roles$feature = setdiff(task_danish_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet", alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_danish_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
chinese <-read_csv("Chinese.csv",show_col_types = FALSE)
chinese = subset(chinese, select = -c(nationality))
chinese$emotion = as.factor(chinese$emotion)
chinese <- chinese %>% drop_na()
chinese.pr <- prcomp(chinese[c(1:163)], center = TRUE,scale. = TRUE)
summary(chinese.pr)
screeplot(chinese.pr, type = "l", npcs = 25, main = "Screeplot of the first 20 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(chinese.pr$sdev^2 / sum(chinese.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 6, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC6"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = chinese[, "emotion"], ID=chinese[,"ID"],chinese.pr$x[, 1:11]) %>%
as.data.frame()
# Task definition
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_chinese_pca = TaskClassif$new(id = "chinese", backend = components,
target = "emotion")
task_chinese_pca$col_roles$group = "ID"
task_chinese_pca$col_roles$feature = setdiff(task_chinese_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet", alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_chinese_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
spanish <-read_csv("Spanish.csv",show_col_types = FALSE)
spanish = subset(spanish, select = -c(nationality))
spanish$emotion = as.factor(spanish$emotion)
spanish <- spanish %>% drop_na()
spanish.pr <- prcomp(spanish[c(1:163)], center = TRUE,scale. = TRUE)
summary(spanish.pr)
screeplot(spanish.pr, type = "l", npcs = 25, main = "Screeplot of the first 20 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(spanish.pr$sdev^2 / sum(spanish.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 6, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC6"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = spanish[, "emotion"], ID = spanish[,"ID"],spanish.pr$x[, 1:8]) %>%
as.data.frame()
# Task definition
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_spanish_pca = TaskClassif$new(id = "spanish", backend = components,
target = "emotion")
task_spanish_pca$col_roles$group = "ID"
task_spanish_pca$col_roles$feature = setdiff(task_spanish_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet", alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_spanish_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
#learners = list(featureless, tree, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
chinese <-read_csv("Chinese.csv",show_col_types = FALSE)
setwd("~/Documents/GitHub/AIBS---Final/AIBS/code - mlr3")
english <- read_csv("English.csv",show_col_types = FALSE)
english = subset(english,select = -c(nationality,ID))
english$emotion = as.factor(english$emotion)
loaded_tuned_model <- readRDS("tree_english.rds")
english <- english %>%
drop_na()
english %>%
anyNA()
english_results <- english%>% select(emotion) %>%
bind_cols(loaded_tuned_model %>%
predict(newdata = english))
# Print predictions
english_results %>%
slice_head(n = 5)
# Confusion matrix
#install.packages("yardstick")
library(yardstick)
english_results %>%
conf_mat(emotion, ...2)
update_geom_defaults(geom = "tile", new = list(color = "black", alpha = 0.7))
# Visualize confusion matrix
english_results %>%
conf_mat(emotion, ...2) %>%
autoplot(type = "heatmap")
#Statistical summaries for the confusion matrix
conf_mat(data = english_results, truth = emotion, estimate = ...2) %>%
summary()
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
setwd("~/Documents/GitHub/AIBS---Final/AIBS/code - feedback")
english <-read_csv("English.csv",show_col_types = FALSE)
english = subset(english, select = -c(nationality))
english$emotion = as.factor(english$emotion)
english <- english %>% drop_na()
english.pr <- prcomp(english[c(1:163)], center = TRUE,scale. = TRUE)
summary(english.pr)
screeplot(english.pr, type = "l", npcs = 25, main = "Screeplot of the first 25 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(english.pr$sdev^2 / sum(english.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 17, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC6"),
col=c("blue"), lty=5, cex=0.6)
screeplot(english.pr, type = "l", npcs = 25, main = "Screeplot of the first 25 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(english.pr$sdev^2 / sum(english.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 17, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC17"),
col=c("blue"), lty=5, cex=0.6)
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
danish <-read_csv("Danish.csv",show_col_types = FALSE)
danish = subset(danish, select = -c(nationality))
danish$emotion = as.factor(danish$emotion)
danish <- danish %>% drop_na()
danish.pr <- prcomp(danish[c(1:163)], center = TRUE,scale. = TRUE)
summary(danish.pr)
screeplot(danish.pr, type = "l", npcs = 25, main = "Screeplot of the first 25 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(danish.pr$sdev^2 / sum(danish.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 12, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC12"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = danish[, "emotion"],ID=danish[,"ID"], danish.pr$x[, 1:12]) %>%
as.data.frame()
# Task definition
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_danish_pca = TaskClassif$new(id = "danish", backend = components,
target = "emotion")
task_danish_pca$col_roles$group = "ID"
task_danish_pca$col_roles$feature = setdiff(task_danish_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet", alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_danish_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
chinese <-read_csv("Chinese.csv",show_col_types = FALSE)
chinese = subset(chinese, select = -c(nationality))
chinese$emotion = as.factor(chinese$emotion)
chinese <- chinese %>% drop_na()
chinese.pr <- prcomp(chinese[c(1:163)], center = TRUE,scale. = TRUE)
summary(chinese.pr)
screeplot(chinese.pr, type = "l", npcs = 25, main = "Screeplot of the first 25 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(chinese.pr$sdev^2 / sum(chinese.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 11, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC11"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = chinese[, "emotion"], ID=chinese[,"ID"],chinese.pr$x[, 1:11]) %>%
as.data.frame()
# Task definition
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_chinese_pca = TaskClassif$new(id = "chinese", backend = components,
target = "emotion")
task_chinese_pca$col_roles$group = "ID"
task_chinese_pca$col_roles$feature = setdiff(task_chinese_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet", alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_chinese_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
library(ggplot2)
library(patchwork)
library(readr)
library(MASS)
library(caTools)
library(mlr3verse)
#install.packages("iml")
library(iml)
library(mlr3)
library(mlr3learners)
library(dplyr)
library(tidyverse)
library(parallel)
detectCores()
cores = detectCores() - 1
library(future)
plan("multisession",workers = cores)
set.seed(2022,kind = "L'Ecuyer-CMRG")
spanish <-read_csv("Spanish.csv",show_col_types = FALSE)
spanish = subset(spanish, select = -c(nationality))
spanish$emotion = as.factor(spanish$emotion)
spanish <- spanish %>% drop_na()
spanish.pr <- prcomp(spanish[c(1:163)], center = TRUE,scale. = TRUE)
summary(spanish.pr)
screeplot(spanish.pr, type = "l", npcs = 25, main = "Screeplot of the first 20 PCs")
abline(h = 1, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 1"),
col=c("red"), lty=5, cex=0.6)
cumpro <- cumsum(spanish.pr$sdev^2 / sum(spanish.pr$sdev^2))
plot(cumpro[0:25], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 8, col="blue", lty=5)
abline(h = 0.9, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC8"),
col=c("blue"), lty=5, cex=0.6)
components <- cbind(emotion = spanish[, "emotion"], ID = spanish[,"ID"],spanish.pr$x[, 1:8]) %>%
as.data.frame()
# Task definition
rdesc = rsmp("repeated_cv", repeats = 10,folds = 5)
mes = msrs(c("classif.ce","classif.acc"))
task_spanish_pca = TaskClassif$new(id = "spanish", backend = components,
target = "emotion")
task_spanish_pca$col_roles$group = "ID"
task_spanish_pca$col_roles$feature = setdiff(task_spanish_pca$col_roles$feature, "ID")
library(parallel)
detectCores()
cores = detectCores() - 1 # save one core to keep the computer operational
library(future)
plan("multisession", workers = cores)
set.seed(2022)
featureless = lrn("classif.featureless",predict_type = "prob")
lasso = lrn("classif.glmnet", alpha = 1)
tree = lrn("classif.rpart")
rf = lrn("classif.ranger",num.trees = 500)
knn = lrn("classif.kknn")
nb = lrn("classif.naive_bayes")
nn = lrn("classif.nnet")
design_classif = benchmark_grid(
tasks = task_spanish_pca,
learners = list(featureless, lasso, tree, rf, knn, nb, nn),
#learners = list(featureless, tree, knn, nb, nn),
resamplings = rdesc)
bm_classif = benchmark(design_classif)
plan('sequential')
autoplot(bm_classif, measure = msr("classif.acc"))
